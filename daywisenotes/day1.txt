1. name.
2. years of experience.
3. have you seen the content.
4. what is your expectation from the training program.

https://github.com/noteonbg/CplusLennox.git




Design is non determistic..

being vague is not solve anybody problem.
finally design should decompose into a series of function calls.


look at function

1. it gets called by the hardware or system.
2. some programmer calls it.

bad intent +Good process, intent will win..


anybody who tells I understood architecture.
where is the excel sheet.

Design
1. justify your layering..
2. how are you communicating between layers both positive and negative things.
3. consistency..

Know architecture
i know entry point, or exit point.

Project success = process * technology * tools *culture.

world largest fight is between standard and product.
customer likes standard
companies like product and so what company does deviate from the standard
and still tell the customer i like the standard and thenslowly make the customer
forget the standard use the product.

three basic things..

0. nobody gets killed by respecting theory.. 
1. loyalty towards project.
2. tolerating uncertainty and doing poc when we have  a doubt.
3. generalize our learning..

before doing bad things, what to do tell good things.


what does it mean
1. have the excel sheet.
2. we have to respect functions and variables.
3. performance have me measured...
4. c++ .. problem of design..  ==nobody can use complete c++in the project because they
dont need it.

proof that we are using c++

1. reference usage.
2. oops part we can do it provided we know oops.
3. c++ specific things, exception handling, templates, operator overloading...
4. C++ 11 features... till c++ 17 features introduction c++20..

Object oriented programming
1. interface or abstraction. ( this is what .h was doing in c)****
2. encapsulation ( yes we can do this in c.. static functions, static global variables)
3. relationship between classes ( dependency, association , inheritance -- becomes difficult
in c)*****
4. namespace.. ( may not be possible in c)

1 and 3 are difficult and we should slow down when we are telling we are following oo.


intent of 4 things to aid maintenance.
when X and Y are interacting when X changes how do you keep Y immune.


c++17.. 
gcc family
Microsoft family
clang ...

C++11 major version..

1. lamda expressions..
2. stl improvmenets.
3. focus on figuring how to get maximum things done at compile constexpr..
4. thread library become part of it..
5. smart pointers, dont need to do allocate and dont need to deallocate still use
the heap..


c++17.
1. structured bindings..
2. new algorithms in the STL>

11.00 to 11.15AM

1.00PM
2.00PM

3.30PM

6.00PM

function 5/5
1. function def
I should know who/what is going to  call the function
how will i indicate failure or success

2. function calling
common functions, opening documentation.

3. function assignment
function asisngment  is not function calling.


variable 5/5
1. we have to decide operations and then choose data type
2. we have to know the scope.


1. namespace to avoid naming conflicts...













 
functions

1. so called global function outside namespace which is rare
2. function inside namespce.

while calling funtions inside namespace we put namespace::functionname();

3. functions inside class. what it means.. depends on type of function
you have the class.


why do we create class in c++..? why you create a structure in C
== create  project specific data type  ==model.

data type = content + operations.
in c style structure typically we cannot define function inside it.
in c++ we can.

c++ structure == c++ class practically
content = variables present in the class.
operations = funtions present in the class.

what is writng a class. creating a new data type
you have a new data type.. what do we do after that

1. create a variable.
2. operate on it.

1. create an object.
2. call non static functions of the object.

nPQR
{

public void freak;
public void junk;

}


I am designing aclass

1. content + operations.
2. constructor design.


I doing class design.
1. non static variables in the class.
2. non static functions in the class.
3. constructors.

constructors. why..
1. we have to value collaboration.
2. imagine two people X and Y.
X is creating the Thermostat class.  == creator of the data type.
Y is user of the ThermoStat class.  == user of the data type, he will create variables.
X wants to put some conditions on Y. example dont create Thermostat until you
mention minimum tempature... how can X do.. X can do write by writing a constructor
in this thermostat class.

show rigour in constructor design... 
constructor function gets called automatically when object is getting created..
we know we can write multiple constructors, welcome to overloading..

if you see static word inside class obviously dont relate it to anything of C.

reference in c++

1. although internally it is a pointer.. still we will use the better word
it is an alias for a variables, references needs to be initialized..


int with any data type
int i =3;
int &x =i;
here we term x as a reference... reference to be initlized at the point of
creation..


int i=7;
int &x=i;
x =7;
print i;

the whole program is stupid why..

important point, reference creation and assignment happens in different functions.


whatever spoke now is called lvalue reference.. 
refrence == lvalue reerence

c++11 = rvalue references.

int &i=3; //this wont compile

int &&i =3;//this will compile
&&i ...  rvalue reference..





all of us should be afraid of logical errors.

Class Circle
{
public:
int radius
Circle()
{
	Circle(3);

}

Circle(int x)
{
radius =x;
}


}


Circle c;
c.radius() 


classname() == anonymous object






variables








i have a hardware X

simulation for X
i have a code Y.

Y code if i use assert, if fails X will get spoilt.





this pointer?

1. you must be a non static function.
2. that means this pointer is local
3. it gets created automatically and it points to the calling object( self referential pointer)
4. when to use it, method chaining.. style of code..
5. when a local variable and non static variable are with the same name..


class A
{
int i;
public: 
 void f1() { 
this 	
	i =4;

}

A obj, obj2;
obj.f1();
obj2.f1();


f1 does not by know by default whether to deal with i of obj or obj2.
the this present inside f1 will give it an idea which i it should deal with.


f1().f2().f3();

call f1 and whatever object it returns , using that object call f2....



Destructor.

1. gets called automatically when object is removed from memory.
2. when object gets removed from memory , depends on where it is

1. heap  -- programmer should call delete.
2. stack  -- storage class
destructor is only one...

what you do inside destructor.
deallocate memory if you have allocated on heap... 
~classname..




variable  --superset
object --subset of variable
reference  --subset of variable
pointer. --subset of variable.


A *ptr;
ptr is pointer  which point to an object of type A.


data type on pointer useless until we operate on the pointer.
to operate on the pointer, we should have assigned the pointer.

























